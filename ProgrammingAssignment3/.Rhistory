library(swilr)
library(swirl)
swirl9
swirl()
library(swirl)
swirl()
c(0.5, 55, -10, 6)
num_vect <- (0.5, 55, -10, 6)
num_vect <- c(0.5, 55, -10, 6)
ft <- num_vect < 1
num_vect < 1
tf <- num_vect < 1
tf
num_vect >= 6
my_char <- c("My", "name", "is")
my_char
past(my_char, collapse = " ")
paste(my_char, collapse = " ")
c(my_char, "Katie")
my_name <- c(my_char, "Katie")
my_name
paste(my_name, collapse = " ")
paste("Hello", "world!", sep = " ")
paste(c(1, 2, 3), c("X", "Y", "Z"), sep = "")
paste(1:3, c("X", "Y", "Z"), sep = "")
paste(LETTERS, 1:4, sep = "-")
x <- c(44, NA, 5, NA)
x*3
y<- rnorm(1000)
z<- rep(NA, 1000)
my_data <- sample(c(y, z), 100)
is.na(my_data)
my_na <- is.na(my_data)
my_na
my_data == NA
sum(my_na)
my_data
0/0
Inf-Inf
x
x[1:10]
x[is.na(x)]
y < - x[!is.na(x)]
y <- x[!is.na(x)]
y
y[y>0]
x[x>0]
x[!is.na(x) & x > 0]
c(3, 5, 7)
c(4, 6, 7)
x[c(3, 5, 7)]
x[0]
x[3000]
x[c(-2, -10)]
x[-c(2, 10)]
vect <- c(foo = 11, bar = 2, norf = NA)
vect
names(vect)
vect2 <- c(11, 2, NA)
names(vect2) <- c("foo", "bar", "norf")
?identical
identical(vect, vect2)
vect["bar"]
vect[c("foo", "bar")]
my_vector <- 1:20
my_vector
dim(my_vector)
length(my_vector)
dim(my_vector) <- c(4,5)
dim(my_vector)
attributes(my_vector)
my_vector
class(my_vector)
my_matrix <- my_vector
?"matrix"
?matrix()
?matrix
matrix(1:20, nrow = 4, ncol = 5)
matrix(1:20, 4, 5)
my_matrix2 <- matrix(1:20, nrow = 4, ncol = 5)
idential(my_matrix, my_matrix2)
identical(my_matrix, my_matrix2)
patients <- c("Bill", "Gina", "Kelly", "Sean")
cbind(patients, my_matrix)
my_data <- data.frame(patients, my_matrix)
my_data
class(my_data)
cnames <- c("patient", "age", "weight", "bp", "rating", "test")
colnames(my_data) <- cnames
my_data
f <- function(x) {
g <- function(y) {
y + z
}
z <- 4
x + g(x)
}
z <- 10
f(3)
x <- 1:10
if(x > 5) {
x <- 0
}
cube <- function(x, n) {
x^3
}
cube(3)
library(datasets)
data("iris")
?iris
s <- split(iris, iris$Sepal.Length)
class(s)
lapply(s, mean)
s
s <- split(iris, iris$Species)
s
s <- s[ , "virginica"]
s
lapply(s, function(x) colMeans(x["Sepal.Length"]))
colMeans(iris)
apply(iris[ , 1:4], 2, mean)
apply(iris, 1, mean)
library(datasets)
data(mtcars)
mtcars
split(mtcars, cyl)
split(mtcars, mtcars$cyl)
s <- split(mtcars, mtcars$cyl)
lapply(s, function(x) colMeans(x[c("mpg")]))
tapply(mtcars$mpg, mtcars$cyl, mean)
lapply(s, function(x) colMeans(x[c("hp")]))
82.63636 - 209.2143
debug(ls)
ls
clc
q
q
q
q
q
q
q
q
q
q
q
q
hi
git clone https://github.com/katbisho/ProgrammingAssignment2.git
git clone(https://github.com/katbisho/ProgrammingAssignment2.git)
set.seed(1)
rpois(5, 2)
s <- rpois(5, 2)
class(s)
rpois(5, 2)
rpois(5, 2)
set.seed(10)
x <- rep(0:1, each = 5)
e <- rnorm(10, 0, 20)
y <- 0.5 + 2 * x + e
x
seed(1)
set.seed(1)
rpois(5, 2)
getwd()
setwd("~/Documents/datasciencecoursera/ProgrammingAssignment3")
file <- read.csv("outcome-of-care-measures.csv")
class(file)
file["Hospital.30.Day.Death..Mortality..Rates.from.Heart.Attack"].argmax()
file['Hospital.30.Day.Death..Mortality..Rates.from.Heart.Attack'].argmax()
s <- file[ ,"Hospital.30.Day.Death..Mortality..Rates.from.Heart.Attack"]
swirl()
library(swirl)
swirl()
TRUE == TRUE
(FALSE == TRUE) == FALSE
6 == 7
6 < 7
10 <= 10
5 != 5
5 != 7
!5 != 7
!5 = 7
!5 == 7
FALSE & FALSE
TRUE & c(TRUE, FALSE, FALSE)
TRUE && c(TRUE, FALSE, FALSE)
TRUE | c(TRUE, FALSE, FALSE)
TRUE || c(TRUE, FALSE, FALSE)
5 > 8 || 6 != 8 && 4 > 3.9
isTRUE(6 > 4)
identical('twins', 'twins')
xor(5 == 6, !FALSE)
ints <- sample(10)
ints
ints > 5
which(ints > 7)
any(ints < 0)
all(ints > 0)
Sys.Date()
mean(c(2,4,5))
submit()
boring_function('My first function!')
boring_function
submit()
my_mean(c(4, 5, 10))
submit()
remainder(5)
remainder(11, 5)
remainder(divisor = 11, num = 5)
remainder(4, div = 2)
args(remainder)
submit
submit()
evaluate(sd, c(1.4, 3.6, 7.9, 8.8))
evaluate(function(x){x +1}, 6)
evalutate(function(x){x[[1]]}, c(8,4,0))
evalutate(function(x){x[1}, c(8,4,0))
evalutate(function(x){x[1]}, c(8,4,0))
evalutate(function(x) {x[1:1]}, c(8,4,0))
evaluate(function(x){x[1]}, c(8,4,0))
evaluate(function(x) {x[length(x)]}, c(8, 4, 0))
?paste
paste("Programming", "is", "fun")
paste("Programming", "is", "fun!")
submit()
submit()
telegram("hi")
submit()
submit()
submit()
submit()
mad_libs(place = "disneyland", adjective = "good", noun = "people")
submit()
"I" %p% "love" %p% "R"
"I" %p% "love" %p% "R!"
head(flags)
dim(flags)
class(flags)
cls_list <- lapply(flags, class)
cls_list
class(cls_list)
as.character(cls_list)
cls_vect <- sapply(flags, class)
class(cls_vect)
sum(flags$orange)
flag_colors <- flags[ ,11:17]
head(flag_colors)
lapply(flag_colors, sum)
sapply(flag_colors, sum)
sapply(flag_colors, mean)
flag_shapes <-flags[ , 19:23]
lapply(flag_shapes, range)
shape_mat <- sapply(flag_shapes, range)
shape_mat
class(shape_mat)
unique(c(3, 4, 5, 5, 5, 6, 6))
lapply(flags, unique)
unique_vals <- lapply(flags, unique)
unique_vals
length(unique_vals)
sapply(unique_vals, length)
sapply(flags, unique)
lapply(unique_vals, function(elem) elem[2])
sapply(flags, unique)
vapply(flags, unique, numeric(1))
ok()
sapply(flags, class)
vapply(flags, class, character(1))
?tapply
table(flags$landmass)
table(flags$animate)
tapply(flags$animate, flags$landmass, mean)
tapply(flag$populations, flags$red, summary)
tapply(flags$populations, flags$red, summary)
tapply(flags$population, flags$red, summary)
tapply(flags$population, flags$landmass, summary)
